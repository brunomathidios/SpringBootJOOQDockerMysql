/*
 * This file is generated by jOOQ.
 */
package br.com.mathidios.springboot.jooq.docker.mysql.model.jooq.tables;


import br.com.mathidios.springboot.jooq.docker.mysql.model.jooq.Indexes;
import br.com.mathidios.springboot.jooq.docker.mysql.model.jooq.Keys;
import br.com.mathidios.springboot.jooq.docker.mysql.model.jooq.Ordernow;
import br.com.mathidios.springboot.jooq.docker.mysql.model.jooq.tables.records.OdnOrderRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OdnOrder extends TableImpl<OdnOrderRecord> {

    private static final long serialVersionUID = -1899113302;

    /**
     * The reference instance of <code>ordernow.odn_order</code>
     */
    public static final OdnOrder ODN_ORDER = new OdnOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OdnOrderRecord> getRecordType() {
        return OdnOrderRecord.class;
    }

    /**
     * The column <code>ordernow.odn_order.id_order</code>.
     */
    public final TableField<OdnOrderRecord, UInteger> ID_ORDER = createField("id_order", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>ordernow.odn_order.id_user</code>.
     */
    public final TableField<OdnOrderRecord, UInteger> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ordernow.odn_order.id_restaurant</code>.
     */
    public final TableField<OdnOrderRecord, UInteger> ID_RESTAURANT = createField("id_restaurant", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ordernow.odn_order.in_status_order</code>.
     */
    public final TableField<OdnOrderRecord, String> IN_STATUS_ORDER = createField("in_status_order", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>ordernow.odn_order.dt_order</code>.
     */
    public final TableField<OdnOrderRecord, LocalDate> DT_ORDER = createField("dt_order", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>ordernow.odn_order.fl_aval</code>.
     */
    public final TableField<OdnOrderRecord, String> FL_AVAL = createField("fl_aval", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>ordernow.odn_order.rating</code>.
     */
    public final TableField<OdnOrderRecord, UInteger> RATING = createField("rating", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * Create a <code>ordernow.odn_order</code> table reference
     */
    public OdnOrder() {
        this(DSL.name("odn_order"), null);
    }

    /**
     * Create an aliased <code>ordernow.odn_order</code> table reference
     */
    public OdnOrder(String alias) {
        this(DSL.name(alias), ODN_ORDER);
    }

    /**
     * Create an aliased <code>ordernow.odn_order</code> table reference
     */
    public OdnOrder(Name alias) {
        this(alias, ODN_ORDER);
    }

    private OdnOrder(Name alias, Table<OdnOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private OdnOrder(Name alias, Table<OdnOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OdnOrder(Table<O> child, ForeignKey<O, OdnOrderRecord> key) {
        super(child, key, ODN_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ordernow.ORDERNOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ODN_ORDER_ID_RESTAURANT, Indexes.ODN_ORDER_ID_USER, Indexes.ODN_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OdnOrderRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_ODN_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OdnOrderRecord> getPrimaryKey() {
        return Keys.KEY_ODN_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OdnOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OdnOrderRecord>>asList(Keys.KEY_ODN_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OdnOrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OdnOrderRecord, ?>>asList(Keys.ODN_ORDER_IBFK_2, Keys.ODN_ORDER_IBFK_1);
    }

    public OdnUser odnUser() {
        return new OdnUser(this, Keys.ODN_ORDER_IBFK_2);
    }

    public OdnRestaurant odnRestaurant() {
        return new OdnRestaurant(this, Keys.ODN_ORDER_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OdnOrder as(String alias) {
        return new OdnOrder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OdnOrder as(Name alias) {
        return new OdnOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OdnOrder rename(String name) {
        return new OdnOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OdnOrder rename(Name name) {
        return new OdnOrder(name, null);
    }
}
